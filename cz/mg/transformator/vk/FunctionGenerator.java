
package cz.mg.transformator.vk;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;


public class FunctionGenerator extends javax.swing.JFrame {

    public FunctionGenerator() {
        initComponents();
    }

    private void generateSimple(){
        throw new UnsupportedOperationException();
    }
    
    /*
        VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures(
            VkPhysicalDevice                            physicalDevice,
            VkPhysicalDeviceFeatures*                   pFeatures);
    */
    /*
        X**
         *  void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures);
         *  @see <a href="https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkGetPhysicalDeviceFeatures.html">khronos documentation</a>
         **X
        public void vkGetPhysicalDeviceFeatures(VkPhysicalDevice.ByValue physicalDevice, VkPhysicalDeviceFeatures.ByReference pFeatures);
    */
    private void generateComplex(){
        String input = jTextAreaInput.getText();
        String output = readAll();
        output = output.replace("HEADER", genHeader(input));
        output = output.replace("NAME", genName(input));
        output = output.replace("INPUT", genInput(input));
        output = output.replace("OUTPUT", genOutput(input));
        jTextAreaOutput.setText(output);
    }
    
    private String genHeader(String input){
        return genOutput(input) + " " + genName(input) + "(" + genInput(input) + ");";
    }

    /*
        VkPhysicalDevice                            physicalDevice,
    */
    private String genInput(String input){
        String[] lines = input.split("\\n");
        String properties = "";
        for(int i = 1; i < lines.length; i++){
            String l = lines[i].trim().replace(");", "").replace(",", "");
            while(l.contains("  ")) l = l.replace("  ", " ");
            l = l.replaceAll("const ", "");
            String[] parts = l.split(" ");
            String type = parts[0];
            String name = parts[parts.length-1];
            if(type.charAt(type.length()-1) == '*' && Character.isUpperCase(type.charAt(0))) type = replaceLastExt(type, "*", ".ByReference");
            else if(type.charAt(type.length()-1) != '*' && Character.isUpperCase(type.charAt(0))) type = type + ".ByValue";
            properties += type + " " + name + ", ";
        }
        properties = replaceLastExt(properties, ", ", "");
        return properties;
    }
    
    private String genOutput(String input){
        String[] lines = input.split("\\n");
        String type = lines[0].split(" ")[1];
        if(type.charAt(type.length()-1) == '*' && Character.isUpperCase(type.charAt(0))) type = replaceLastExt(type, "*", ".ByReference");
        if(type.charAt(type.length()-1) != '*' && Character.isUpperCase(type.charAt(0))) type = type + ".ByValue";
        return type;
    }
    
    private String genName(String input){
        String[] lines = input.split("\\n");
        return lines[0].split(" ")[3].replace("(", "");
    }
    
    private String readAll(){
        InputStream stream = getClass().getResourceAsStream("FunctionSample.txt");
        try(BufferedReader reader = new BufferedReader(new InputStreamReader(stream))){
            String line;
            String content = "";
            while((line = reader.readLine()) != null){
                content = content + line + "\n";
            }
            return content;
        } catch (IOException ex) {
            throw new RuntimeException();
        }
    }

    private static String replaceLastExt(String s, String what, String with){
        int index = s.lastIndexOf(what);
        String before = s.substring(0, index);
        String after = s.substring(index + what.length());
        return before + with + after;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaInput = new javax.swing.JTextArea();
        jButtonSimple = new javax.swing.JButton();
        jButtonComplex = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaInput.setColumns(20);
        jTextAreaInput.setRows(5);
        jScrollPane1.setViewportView(jTextAreaInput);

        jButtonSimple.setText("simple");
        jButtonSimple.setEnabled(false);
        jButtonSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSimpleActionPerformed(evt);
            }
        });

        jButtonComplex.setText("complex");
        jButtonComplex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComplexActionPerformed(evt);
            }
        });

        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setRows(5);
        jScrollPane2.setViewportView(jTextAreaOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonComplex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSimple)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSimple)
                    .addComponent(jButtonComplex))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSimpleActionPerformed
        generateSimple();
    }//GEN-LAST:event_jButtonSimpleActionPerformed

    private void jButtonComplexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComplexActionPerformed
        generateComplex();
    }//GEN-LAST:event_jButtonComplexActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FunctionGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FunctionGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FunctionGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FunctionGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FunctionGenerator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonComplex;
    private javax.swing.JButton jButtonSimple;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaInput;
    private javax.swing.JTextArea jTextAreaOutput;
    // End of variables declaration//GEN-END:variables
}
